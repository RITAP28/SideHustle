generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  CREATOR
}

enum Plan {
  Free
  Premium
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  role            Role            @default(USER)
  password        String
  isAuthenticated Boolean         @default(false)
  isVerified      Boolean         @default(false)
  isCreator       Boolean         @default(false)
  isPaid          Boolean         @default(false)
  plan            Plan            @default(Free)
  Session         Session[]
  Videos          Videos[]
  OTP             OTP[]
  Creator         Creator[]
  Subscriptions   Subscriptions[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Videos {
  videoId          Int      @id @unique @default(autoincrement())
  title            String
  description      String
  dateOfPublishing DateTime
  thumbnail        String
  publisher        User     @relation(references: [id], fields: [publisherId], onDelete: Cascade)
  publisherId      Int
  link             String   @unique
}

model OTP {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  otp          String
  otpExpiresAt DateTime
  userId       Int      @unique
  user         User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Creator {
  creatorId   Int    @id @default(autoincrement())
  creator     String
  displayName String
  videos      Int    @default(autoincrement())
  subscribers Int    @default(0)
  views       Int    @default(0)
  stars       Int    @default(0)
  comments    Int    @default(0)
  userId      Int    @unique
  userEmail   String @unique
  user        User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Subscriptions {
  id            Int    @id @default(autoincrement())
  userId        Int
  userName      String
  creatorUserId Int
  creatorName   String
  user          User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}
