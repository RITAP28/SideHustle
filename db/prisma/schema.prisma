generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  CREATOR
}

enum Plan {
  Free
  Premium
}

enum Status {
  INPROGRESS
  ENDED
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  role            Role            @default(USER)
  password        String
  isAuthenticated Boolean         @default(false)
  isVerified      Boolean         @default(false)
  isCreator       Boolean         @default(false)
  isPaid          Boolean         @default(false)
  plan            Plan            @default(Free)
  Session         Session[]
  Videos          Videos[]
  OTP             OTP[]
  Creator         Creator[]
  Subscriptions   Subscriptions[]
  followers       Follow[]        @relation("Followed")
  following       Follow[]        @relation("Following")
  Review          Review[]
  StarVideo       StarVideo[]
  DislikeVideo    DislikeVideo[]
  File            File[]
  Projects        Projects[]
  WebDevFile      WebDevFile[]
  WebDevFolder    WebDevFolder[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Videos {
  videoId          Int            @id @unique @default(autoincrement())
  title            String
  description      String
  dateOfPublishing DateTime
  thumbnail        String
  publisher        User           @relation(references: [id], fields: [publisherId], onDelete: Cascade)
  publisherId      Int
  link             String         @unique
  Review           Review[]
  StarVideo        StarVideo[]
  DislikeVideo     DislikeVideo[]
}

model OTP {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  otp          String
  otpExpiresAt DateTime
  userId       Int      @unique
  user         User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Creator {
  creatorId    Int            @id @default(autoincrement())
  creator      String
  displayName  String
  videos       Int            @default(autoincrement())
  subscribers  Int            @default(0)
  views        Int            @default(0)
  stars        Int            @default(0)
  comments     Int            @default(0)
  userId       Int            @unique
  userEmail    String         @unique
  user         User           @relation(references: [id], fields: [userId], onDelete: Cascade)
  Review       Review[]
  StarVideo    StarVideo[]
  DislikeVideo DislikeVideo[]
}

model Subscriptions {
  id            Int    @default(autoincrement())
  userId        Int
  userName      String
  creatorUserId Int
  creatorName   String
  user          User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([userId, creatorUserId])
}

model Follow {
  id            Int      @default(autoincrement())
  followedId    Int
  followedName  String
  followingId   Int
  followingName String
  createdAt     DateTime @default(now())
  followed      User     @relation("Followed", references: [id], fields: [followedId])
  following     User     @relation("Following", references: [id], fields: [followingId])

  @@id([followedId, followingId]) // to make sure that each following-followed relationship is unique
}

model Room {
  id             Int      @id @default(autoincrement())
  roomName       String
  roomlink       String
  leader         String
  leaderId       Int
  invitedMembers Int
  createdAt      DateTime @default(now())
  status         Status   @default(INPROGRESS)
  isOneTime      Boolean  @default(false)

  @@unique([id, leaderId])
}

model Review {
  id           Int      @id @default(autoincrement())
  videoId      Int
  reviewerId   Int
  reviewerName String
  creatorId    Int
  reviewText   String
  createdAt    DateTime @default(now())
  user         User     @relation(references: [id], fields: [reviewerId], onDelete: Cascade)
  creator      Creator  @relation(references: [userId], fields: [creatorId], onDelete: Cascade)
  video        Videos   @relation(references: [videoId], fields: [videoId], onDelete: Cascade)
}

model StarVideo {
  id        Int      @id @default(autoincrement())
  videoId   Int
  userId    Int
  creatorId Int
  likedAt   DateTime @default(now())
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  creator   Creator  @relation(references: [userId], fields: [creatorId], onDelete: Cascade)
  video     Videos   @relation(references: [videoId], fields: [videoId], onDelete: Cascade)

  @@unique([userId, videoId])
}

model DislikeVideo {
  id         Int      @id @default(autoincrement())
  videoId    Int
  userId     Int
  creatorId  Int
  dislikedAt DateTime @default(now())
  user       User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  creator    Creator  @relation(references: [userId], fields: [creatorId], onDelete: Cascade)
  video      Videos   @relation(references: [videoId], fields: [videoId], onDelete: Cascade)

  @@unique([userId, videoId])
}

model File {
  fileId    Int      @id @default(autoincrement())
  filename  String
  template  String
  version   String
  content   String
  userId    Int
  username  String
  createdAt DateTime
  updatedAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([filename, userId])
}

model Projects {
  projectId   Int          @id @default(autoincrement())
  projectName String       @unique
  description String?
  createAt    DateTime
  updatedAt   DateTime
  userId      Int
  userName    String
  user        User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  WebDevFile  WebDevFile[]

  @@unique([projectId, userId])
}

model WebDevFile {
  fileId    Int          @id @default(autoincrement())
  filename  String
  content   String
  path      String
  template  String
  createdAt DateTime
  updatedAt DateTime
  folderId  Int?
  projectId Int
  userId    Int
  userName  String
  user      User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  folder    WebDevFolder? @relation(references: [folderId], fields: [folderId], onDelete: Cascade)
  projects  Projects     @relation(references: [projectId], fields: [projectId], onDelete: Cascade)

  @@unique([fileId, userId])
}

model WebDevFolder {
  folderId      Int          @id @default(autoincrement())
  folderName    String
  numberOfFiles Int
  userId        Int
  userName      String
  createdAt     DateTime
  updatedAt     DateTime
  user          User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  WebDevFile    WebDevFile[]

  @@unique([folderId, userId])
}
